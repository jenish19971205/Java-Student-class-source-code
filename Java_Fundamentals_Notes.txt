Day 1

          Java Fundamentals & Git hub Commands

    Classes :

          A class in Java is like a design or layout. It tells what things an object will have and what it can do. By using this class, we can make            real objects in the program. The class itself doesn’t do anything — it just gives the structure. It makes our code neat, reusable, and easy           to manage.


    Objects :
   
          In Java, we use a class to create an object. That object will have all the values and actions defined inside the class

          So basically, object is the real thing created from class. It stores values and we use it to run our code. Class is just the idea, object             is the working part.

       Advantage: Objects help us reuse class code and store different data separately.
        Disadvantage: Too many objects can use more memory and make the code harder to manage.

     Collections :
  
      	Collection in Java means storing multiple values together in one place.

         * It gives us ready-made classes to add, remove, search and manage many values easily.
         * Instead of creating 10 variables, we can use one collection.

    Collection Types (Main 3):

    1. List → Keeps order, allows duplicates

         * Used when we want to store items one after another.
         *  Keeps the order we add.
         *  Allows same value multiple times.

    Types:

         * ArrayList – Most common, fast to read
         * LinkedList – Better if adding/removing often
         * Vector – Like ArrayList, but thread-safe

   2. Set → No duplicates allowed

         * Used when we want only unique values.
         * No duplicate items
         * Order not always maintained (unless using LinkedHashSet)

   Types:

         * HashSet – Fast, but no order
         * LinkedHashSet – Keeps order + no duplicates
         * TreeSet – Keeps sorted order + no duplicates

   3. Map → Stores data as key-value pairs

         (Not part of Collection interface, but in the Collection Framework)
         * Used when we want to store with an ID or name (key).
         * Helps in quick searching by key
         *  Key should be unique, values can be duplicate
   Types:

         * HashMap – Fast, but no order
         * LinkedHashMap – Keeps order
         * TreeMap – Keeps sorted keys


   Advantages :
         Helps store and manage multiple values with less code and more flexibility.

   Disadvantages :
         Uses more memory and can be complex if not used properly.


    Exception:

         Exception means runtime error (error happens when program is running).
         It stops the normal flow of the program.
         If not handled, program will crash.

          we use Exception Handling to catch the error and give a friendly message.
         and To continue the program without stopping.

    GitHub commands :

          git config --global user.name "Your Name"
          git config --global user.email "your@email.com"

          git init → start git
          git add . → add all files
          git commit -m "msg" → save code version
          git remote add origin URL → link to GitHub
          git push → send code to GitHub

Day 2

    Encapsulation :

          Encapsulation is the concept of hiding internal data of a class by making variables private, and controlling access through public methods            like getters and setters.

          It keeps the important data safe, and avoids direct access from outside the class.
          Only specific methods are allowed to read or update the values — this gives full control over how data is accessed or modified.

          Encapsulation helps in:

            1. Protecting sensitive data
            2. Avoiding unwanted changes
            3. Making the code clean, secure, and maintainable

    Inheritance :
          
            1. Inheritance is an object-oriented concept where one class can use the properties and methods of another class, instead of writing                     everything from scratch.
            2. The class that gives its features is called the parent (or superclass), and the class that receives them is called the child (or                      subclass).
            3. In Java, this is done using the extends keyword.

   Why Inheritance is used:
            1.  To reuse existing code
            2. To organize related classes
            3. To avoid repetition
            4.To make code clean and scalable

   Types of Inheritance in Java
         
            1. Single Inheritance :

              One class inherits from one parent class.
              Common and simple — a direct relationship between two classes.

            2. Multilevel Inheritance :

               A class inherits from another class, which itself inherited from another.
               Like a chain — features get passed down step by step.
     
            3. Hierarchical Inheritance :

                Multiple classes inherit from a single parent class.
                One base, many branches.

            4. Multiple Inheritance :

                 Java doesn’t support multiple inheritance with classes (to avoid confusion).
                 But it supports it using interfaces, where a class can implement multiple interfaces.

                With inheritance, we follow a structure where common code is written once and shared across related classes. It keeps the code                        clean, smart, and easy to update or expand.

   Polymorphism :
 
                Polymorphism = One thing behaves in many forms.

             In Java, it means:
                Same method name, but it behaves differently depending on how or where it’s used.

             Real-life example:
                 You have one method: study()
                 Sometimes, you study for hours
                 Sometimes, a subject
                 Sometimes, just generally
                 All are study, but behavior is different. That's Polymorphism.

   Types of Polymorphism in Java
                      Type	                AKA	                 Decided When?
                  1. Compile Time	 Method Overloading	     During Compilation
                  2. Runtime	           Method Overriding	     During Program Run

     1. Compile Time Polymorphism (aka Method Overloading)
            Def :
                Same method name, but different parameters (like input count or type).
                Java decides which one to use while compiling.
     
      2. RunTime Polymorphism :
                Both parent and child have the same method name + same parameters,
               but Java chooses which one to run while the program is running, based on the object.

    Abstraction :
           Abstraction means: "Only show what’s needed, hide the rest."
       It’s like:
           When you drive a car, you don’t care how the engine works
           You just use the steering, brake, accelerator
       Same with Java:
           Just show the important methods to the outside world
           Hide the logic or inner working inside the class
 
    Why Abstraction?
           Hide complexity 🧠
           Keep code clean & safe 🛡️
           Force users to only use the needed parts ✋
           Create a standard (rules to follow)

   How to Achieve Abstraction in Java?
        Java gives two ways to do Abstraction:

             Tool	               Used For	  Abstraction Level
          abstract class	     Partial	   0% – 100%
           interface	      Full	     100%

   1. Using abstract class (Partial Abstraction)
         You write a class with both:
         Normal methods (with code)
         Abstract methods (only rule, no code)
        Class should be marked with abstract keyword.

   2. Interface is just rules — no method body.
         You can't put any normal methods (unless marked default or static).
         All methods are public abstract by default.
       
                Feature	       abstract class	  interface
            Can have method body?	Yes	           No (only rules)
              Inheritance type	extends	           implements
            Constructor allowed?	 Yes	            No
               Access modifier	  Any	           All methods are public
                   Fields	     Normal + final/static	 Only public static final
             Abstraction Level	0–100%	              100% only

        abstraction means we hide the logic and just give the rules or important parts.
         Like a remote control — you click buttons, you don’t care how it works inside.
        Java gives two ways:

         🔹 abstract class: mix of rules and normal methods
         🔹 interface: full rules, no code

         Real use? → Helps to design clean structure, hide inner logic, and force rules in project.

  Packages :

         Package is like a folder in Java where we group related classes together.
         It helps to keep the code organized, avoid name conflicts, and reuse code easily.

Explanation:
         Just like we keep different files in different folders (like pics, docs, videos),
         in Java we keep related classes in one package so things don’t get messy.

 Example:
         java.util → for utility stuff (like Scanner, ArrayList)
         java.io → for input/output classes
         You can also create your own packages in projects.

Setting up for maven project :

         Maven is like your Java project manager — it helps to organize files, manage dependencies (like downloading tools/libraries), and build               projects easily.

How to Set Up a Maven Project in IntelliJ 
          Step 1: Open IntelliJ & Create Maven Project
                  Open IntelliJ
                  Click File > New > Project
                  Select Maven
                  Click Next

          Step 2: Fill Project Details
                  Group ID: like a company/folder name → e.g. com.jenish.project
                  Artifact ID: your project name → e.g. studentapp
                  Click Finish
                  Now IntelliJ will create a project with folders like:

studentapp/
├── src/
│   ├── main/
│   │   └── java/
│   │       └── App.java (default main class)
│   └── test/
├── pom.xml   <-- Maven project file
           
           Step 3: Understand pom.xml (Very Important!)
                   pom.xml is the heart of Maven project.
                   It’s where you write what tools or libraries (dependencies) your project needs.
                   Example inside pom.xml:

<dependencies>
    <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.10</version>
    </dependency>
</dependencies>

           Step 4: Write Java Code Inside src/main/java
                    Create your own class like:

                   package com.jenish.project;

                  public class Student {
                    public void show() {
                         System.out.println("Maven Student Project working!");
                      }
                   }  
          Then use it in your App.java.

          Step 5: Run the Project
                  Right-click on the App.java or your main class
                  Click Run 'App.main()'
                   You’ll see your output!

            Maven helps you manage Java projects smartly
            You only need to focus on coding, Maven handles folder setup and library downloads
            Everything you need is inside pom.xml
            Structure will always stay neat and clear — super helpful for teams


Day 3 :

           1.  Open IntelliJ → Create New Project
               Click "New Project"
               Choose Spring Initializr on the left side
               Service URL: Keep default → https://start.spring.io
               Click Next

           2. Fill Project Details
               Group: com.example
               Artifact: helloworld
               Name: helloworld
               Type: Maven (Default)
               Language: Java
              Java version: 17 or 21 (based on your IntelliJ setup)
              Click Next

           3. Add Dependencies
              Tick these checkboxes:
              Spring Web
              This is enough for Hello World API.
              Click Next → then Finish
             IntelliJ will generate your Spring Boot project folder and it may take a few seconds to download dependencies (look at the bottom                   progress bar).

           4. Project Structure (auto-created by IntelliJ)

helloworld/
 └── src/
     └── main/
         ├── java/
         │   └── com/example/helloworld/
         │       ├── HelloWorldApplication.java
         │       └── HelloController.java  ← (you’ll create this file)
         └── resources/
             └── application.properties
    
         5. Your Main Class – HelloWorldApplication.java
            package com.example.helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HelloWorldApplication {
	public static void main(String[] args) {
		SpringApplication.run(HelloWorldApplication.class, args);
	}
}
         6. Create Your Controller – HelloController.java
            Right-click on com.example.helloworld →
            New → Java Class → Name it: HelloController

Paste this code:

package com.example.helloworld;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @GetMapping("/hello")
    public String sayHello() {
        return "Hello World!";
    }
}
          7. Run the Application
             Go to HelloWorldApplication.java
             Right-click → Run 'HelloWorldApplication.main()'
             In the console, you’ll see:
             Tomcat started on port(s): 8080
              This means your API is running.

          8. Open Browser or Postman
          Go to:

          http://localhost:8080/hello
          You’ll see:

          Hello World!
     Def:
            I used IntelliJ to create a Spring Boot app. I created one REST controller with a /hello endpoint. When I hit the URL, I got Hello                 World! in the browser. Everything done inside IntelliJ using Spring Initializr.









