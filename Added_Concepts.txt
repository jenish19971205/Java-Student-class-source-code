1. Data types
         Data types are used to define what type of value a variable can hold (like number, text, decimal, etc.)
         Two Main Types of Data Types:
     1. Primitive Data Types (basic built-in types — small & fast)
          There are 8 primitive types:

            Type	    Example Value	           What It Stores
             int	        25	                  whole numbers
            float	       65.5f	                decimal numbers (less precision)
            double	     89.77	                decimal numbers (more precision)
             char	        'A'	                  single character
            boolean	   true / false	            true or false values
             byte	          120	                 small range numbers
             short	      25000	                 short-range numbers
            long	      9999999999L	              big numbers



    2. Non-Primitive Data Types (also called Reference types)
                 Type	      Example	      What It Is
               String	       "Ram"	      sequence of characters
                Array	      {1,2,3}	      collection of values
                Class	      Student s1	   user-defined blueprint
                Object	   new Student()	 actual thing from class

     Example Using Student Class with Different Data Types:

         class Student {
              // Primitive types
               int age = 20;
                float marks = 85.5f;
               char grade = 'A';
               boolean isPassed = true;

             // Non-primitive types
             String name = "Ram";

    void showDetails() {
        System.out.println("Name: " + name);        // String
        System.out.println("Age: " + age);          // int
        System.out.println("Marks: " + marks);      // float
        System.out.println("Grade: " + grade);      // char
        System.out.println("Passed: " + isPassed);  // boolean
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showDetails();
    }
}
        
      Explanation for the Code
            int age = 20; → holds a whole number (student’s age)
            float marks = 85.5f; → holds decimal number (student’s marks) — f is needed
            char grade = 'A'; → holds a single character
             boolean isPassed = true; → true or false value
            String name = "Ram"; → holds a sequence of characters (student name)
           The method showDetails() prints all the values stored using different data types.

        Def: 

           Learned Java Data Types — primitive (int, float, char, boolean, etc.) and non-primitive (String, Array, Class). Practiced using Student                class to define and print different types of data. Covered all types with real examples and beginner-friendly explanations.

2. Type Casting :

            Type casting just means changing one type of value to another.
            Like changing a number without decimal (int) to number with decimal (float) or the other way.
            Example: You have 10 rupees in int, but you want it like 10.00 in float. That’s casting.

        Two Types You Must Know:
              1. Widening Casting → Java does it automatically
                 Small ➡ Big type

                  int age = 18;
                  float newAge = age;  // no problem
                  Like giving 18 to a bigger box (float) → it becomes 18.0
                  No loss, no danger, Java handles it for you.

              2. Narrowing Casting → You must do it manually
                 Big ➡ Small type


                 double marks = 99.75;
                 int newMarks = (int) marks;
                 You’re putting 99.75 into a smaller box (int) → it cuts the .75
                  You MUST tell Java: “Hey, do this” by using (int)
                  Possible loss of data — so be careful.

          Student Example Code 

class Student {
    void showCasting() {
        // Widening
        int age = 20;
        float convertedAge = age;
        System.out.println("Widening: " + convertedAge);  // 20.0

        // Narrowing
        double marks = 85.6;
        int convertedMarks = (int) marks;
        System.out.println("Narrowing: " + convertedMarks);  // 85
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showCasting();
    }
}
      
      Explanation of Code:
          int age = 20; → normal age value
          float convertedAge = age; → becomes 20.0 → no issue (auto)
          double marks = 85.6; → marks with decimal
          int convertedMarks = (int) marks; → becomes 85 (cuts .6)
          System.out.println() shows both outputs

Def: 

       Learned Type Casting — changing value types. Covered auto casting (int ➡ float) and manual casting (double ➡ int) with Student example.
