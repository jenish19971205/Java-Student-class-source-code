1. Data types
         Data types are used to define what type of value a variable can hold (like number, text, decimal, etc.)
         Two Main Types of Data Types:
     1. Primitive Data Types (basic built-in types — small & fast)
          There are 8 primitive types:

            Type	    Example Value	           What It Stores
             int	        25	                  whole numbers
            float	       65.5f	                decimal numbers (less precision)
            double	     89.77	                decimal numbers (more precision)
             char	        'A'	                  single character
            boolean	   true / false	            true or false values
             byte	          120	                 small range numbers
             short	      25000	                 short-range numbers
            long	      9999999999L	              big numbers



    2. Non-Primitive Data Types (also called Reference types)
                 Type	      Example	      What It Is
               String	       "Ram"	      sequence of characters
                Array	      {1,2,3}	      collection of values
                Class	      Student s1	   user-defined blueprint
                Object	   new Student()	 actual thing from class

     Example Using Student Class with Different Data Types:

         class Student {
              // Primitive types
               int age = 20;
                float marks = 85.5f;
               char grade = 'A';
               boolean isPassed = true;

             // Non-primitive types
             String name = "Ram";

    void showDetails() {
        System.out.println("Name: " + name);        // String
        System.out.println("Age: " + age);          // int
        System.out.println("Marks: " + marks);      // float
        System.out.println("Grade: " + grade);      // char
        System.out.println("Passed: " + isPassed);  // boolean
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showDetails();
    }
}
        
      Explanation for the Code
            int age = 20; → holds a whole number (student’s age)
            float marks = 85.5f; → holds decimal number (student’s marks) — f is needed
            char grade = 'A'; → holds a single character
             boolean isPassed = true; → true or false value
            String name = "Ram"; → holds a sequence of characters (student name)
           The method showDetails() prints all the values stored using different data types.

        Def: 

           Learned Java Data Types — primitive (int, float, char, boolean, etc.) and non-primitive (String, Array, Class). Practiced using Student                class to define and print different types of data. Covered all types with real examples and beginner-friendly explanations.

2. Type Casting :

            Type casting just means changing one type of value to another.
            Like changing a number without decimal (int) to number with decimal (float) or the other way.
            Example: You have 10 rupees in int, but you want it like 10.00 in float. That’s casting.

        Two Types You Must Know:
              1. Widening Casting → Java does it automatically
                 Small ➡ Big type

                  int age = 18;
                  float newAge = age;  // no problem
                  Like giving 18 to a bigger box (float) → it becomes 18.0
                  No loss, no danger, Java handles it for you.

              2. Narrowing Casting → You must do it manually
                 Big ➡ Small type


                 double marks = 99.75;
                 int newMarks = (int) marks;
                 You’re putting 99.75 into a smaller box (int) → it cuts the .75
                  You MUST tell Java: “Hey, do this” by using (int)
                  Possible loss of data — so be careful.

          Student Example Code 

class Student {
    void showCasting() {
        // Widening
        int age = 20;
        float convertedAge = age;
        System.out.println("Widening: " + convertedAge);  // 20.0

        // Narrowing
        double marks = 85.6;
        int convertedMarks = (int) marks;
        System.out.println("Narrowing: " + convertedMarks);  // 85
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showCasting();
    }
}
      
      Explanation of Code:
          int age = 20; → normal age value
          float convertedAge = age; → becomes 20.0 → no issue (auto)
          double marks = 85.6; → marks with decimal
          int convertedMarks = (int) marks; → becomes 85 (cuts .6)
          System.out.println() shows both outputs

        Def: 

       Learned Type Casting — changing value types. Covered auto casting (int ➡ float) and manual casting (double ➡ int) with Student example.

3. Operators and presendance :

        In simple words, operators are symbols that do some work in Java — like add, subtract, compare, assign, etc.
       Operators are symbols used to do operations like math, checking conditions, assigning values, etc.

              Types of Operators in Java (With Easy Meaning)

                       Type	          What It Does	                      Example
                  Arithmetic	    Do math (+, -, *, /, %)	             a + b
             Relational / Comparison    Compare two values (==, >, <, etc.)	    a > b
                    Logical	       Combine conditions (&&,	
                  Assignment              Assign value (=, +=, -=, etc.)	    a = 10
                      Unary	   Work on one value (++a, --b, -a)	             a++
                      Bitwise	   Work on bits (&,	                               , ^, <<, >>)
                     Ternary	   Shortcut if-else condition ? val1 : val2	    a > b ? x : y

👨‍🎓 Example Using Student Class (Basic Operators):

class Student {
    void operatorDemo() {
        int marks1 = 85;
        int marks2 = 90;

        // Arithmetic
        int total = marks1 + marks2;
        System.out.println("Total: " + total);

        // Relational
        System.out.println("Is marks1 greater? " + (marks1 > marks2));

        // Logical
        boolean passed = (marks1 > 40) && (marks2 > 40);
        System.out.println("Passed both subjects: " + passed);

        // Assignment
        int bonus = 5;
        bonus += 10; // same as bonus = bonus + 10
        System.out.println("Bonus: " + bonus);

        // Unary
        int age = 20;
        age++;
        System.out.println("Age after 1 year: " + age);

        // Ternary
        String result = (marks1 > 50) ? "Pass" : "Fail";
        System.out.println("Result: " + result);
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.operatorDemo();
    }
}
     Explanation of Code:
             +, >, &&, =, ++, ? : are all different operators
             Used them to calculate marks, check if passed, add bonus, and more
             Ternary operator is a short version of if-else

       What Is Operator Precedence?
             Operator precedence means which operator runs first when multiple are in the same line.

        Example:

             int result = 10 + 5 * 2;
             Here * runs first, not +
              So 5 * 2 = 10, then 10 + 10 = 20

          Java follows a priority order to run operators — multiply/divide has higher priority 
          when running multiple operators in one line.

4. Strings in detail :

        String = group of characters (text)
       In Java, it’s a class, not a data type — but we use it like a normal variable.
       If we want to store and work with text (like name, address, etc.), we use String in Java.

       String name = "Ram";

   Ways to Create String
      1. Using Double Quotes (common way)
           String name = "Ram";
           Java directly stores it in memory (String Constant Pool).
      2. Using new Keyword (rarely used)

           String name = new String("Ram");
           Stored in heap memory, creates new object every time.

   Common String Methods

           Method	                  Use	                         Example
          length()	Finds how long the string is	       "Ram".length() → 3
        charAt(index)	Get char at specific index 	      "Ram".charAt(1) → 'a'
        toUpperCase()	Convert to caps	                        "ram".toUpperCase() → "RAM"
        toLowerCase()	Convert to small letters	               "RAM".toLowerCase() → "ram"
        equals()	         Compare 2 strings (case-sensitive)	       "Ram".equals("ram") → false
      equalsIgnoreCase()	Compare strings without case check	       "Ram".equalsIgnoreCase("ram") → true
       contains()	         Check if part exists	                "Student".contains("dent") → true
      substring(start, end)    Get part of string	                "Student".substring(0, 3) → "Stu"
        concat()	           Join 2 strings	                          "Ram".concat(" Kumar") → "Ram Kumar"
        replace()	               Replace text	                 "Ram".replace("a", "o") → "Rom"

Example Using Student Class

class Student {
    void stringOperations() {
        String name = "Arun";
        String course = "Java";

        // Length
        System.out.println("Name length: " + name.length());

        // Uppercase
        System.out.println("Uppercase: " + name.toUpperCase());

        // Char at position
        System.out.println("2nd letter: " + name.charAt(1));

        // String join
        String fullInfo = name + " is learning " + course;
        System.out.println("Info: " + fullInfo);

        // Equals check
        System.out.println("Name equals Arun? " + name.equals("Arun"));

        // Contains
        System.out.println("Name contains 'ru'? " + name.contains("ru"));
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.stringOperations();
    }
}

     Easy Explanation
        name.length() → how many letters in the name
        toUpperCase() → make it full caps
        charAt(1) → gives second letter (index starts from 0)
        + → you can join strings easily using + or concat()
        equals() → compare strings safely
        contains() → check if something is inside the string

5. Method Overloading :

      Same method name, but different parameters (inputs) in the same class.
      Basically, you're doing similar work, but in multiple styles, depending on the input.

  Simple Definition:
      Method Overloading is when you create multiple methods with same name but different arguments in the same class.
      Different number of parameters
      Or different data types

  Example: Method Overloading in Student

class Student {
    void showInfo(String name) {
        System.out.println("Student Name: " + name);
    }

    void showInfo(String name, int age) {
        System.out.println("Name: " + name + ", Age: " + age);
    }

    void showInfo(int rollNo) {
        System.out.println("Roll Number: " + rollNo);
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showInfo("Arun");
        s.showInfo("Arun", 20);
        s.showInfo(101);
    }
}
 Easy Explanation:
       showInfo() is called multiple times
       But each time with different inputs (name, name+age, rollNo)
      Java automatically picks the right method based on input
      This is overloading — same method name, different inputs

6. Method Overriding?
      Same method name, same parameters, but in different classes (Parent → Child)
      You're changing the behavior of a method in the child class.

   Simple Definition:
       Method Overriding is when a child class gives its own version of a method that already exists in the parent class — with the same name and            parameters.

  Example: Method Overriding in Student

class Student {
    void study() {
        System.out.println("Student is studying.");
    }
}

class CollegeStudent extends Student {
    @Override
    void study() {
        System.out.println("College student is studying with laptop.");
    }

    public static void main(String[] args) {
        CollegeStudent cs = new CollegeStudent();
        cs.study();  // Calls overridden method
    }
}

     Easy Explanation:
          Parent class has study() method
          Child class (CollegeStudent) overrides that method
           Even though method name and input is same, child class gives its own version
           Java will run the child class version when object is of child

       Overloading vs Overriding (Simple Table)

           Feature	     Overloading	                            Overriding
     Classes involved	      Same class	                           Parent and Child class
       Method Signature	      Same name, different params	          Same name, same params
          Purpose	           Do similar things in different ways	 Change behavior in child class
       Example Use	      Print name, Print name+age	           Parent student vs College student

7. Scope :

       Scope means:
             Where a variable can be seen or used in the program.
              Or simply — how long and where a variable lives inside your code.

       Types of Scope in Java :

        Scope Type	      What it means
        Local Scope	      Inside a method/block only
        Instance Scope	      Inside class (non-static) — needs object
        Static/Global Scope      Inside class (static) — no object needed
        Block Scope	      Inside curly brackets {} like if/for

       Example: Using Student Class to Show Scope

class Student {
    String name = "Arun";         // Instance Scope
    static String school = "ABC"; // Static Scope

    void printDetails() {
        int age = 20; // Local Scope (inside method)
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }

    void checkBlockScope() {
        if (true) {
            String course = "Java"; // Block Scope
            System.out.println("Course: " + course);
        }
        // course variable can't be used here — outside its block
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.printDetails();
        s.checkBlockScope();

        // Static can be accessed directly
        System.out.println("School: " + school);
    }
}

    Easy Explanation:
       name → can be used in any non-static method (belongs to object)
       school → can be used anywhere in class (static = belongs to class)
       age → only inside the printDetails() method
      course → only inside the if block where it was created

     Analogy:
        Local = Just temporary, like something in your pocket
        Instance = Belongs to object, like your ID card
        Static = Shared by all, like school name
        Block = Limited, like a locker only in one room

8. Constructors :
               A constructor is like a special method that runs automatically when you create an object.
              It’s used to set values (initialize) when the object is born.

      Think of it like:
              When a new student joins, we give his name, age, etc. — that's what constructor does when object is created.

 Rules of Constructor:
          Same name as the class
          No return type (not even void)
          Runs automatically when object is created using new
          Can be default, parameterized, or multiple (overloading)

Types of Constructors 
         1.  Default Constructor
              No input values. Java gives one if you don’t create.

class Student {
    Student() {
        System.out.println("Default constructor called");
    }

    public static void main(String[] args) {
        Student s1 = new Student();  // Automatically runs
    }
}
         2. Parameterized Constructor
              You send values when object is created.

class Student {
    String name;
    int age;

    Student(String n, int a) {
        name = n;
        age = a;
    }

    void show() {
        System.out.println("Name: " + name + ", Age: " + age);
    }

    public static void main(String[] args) {
        Student s1 = new Student("Arun", 21);
        s1.show();
    }
}
         3. Constructor Overloading
              Same constructor name, but different parameters.

class Student {
    String name;
    int age;

    Student() {
        System.out.println("Default Constructor");
    }

    Student(String n) {
        name = n;
        System.out.println("Name set: " + name);
    }

    Student(String n, int a) {
        name = n;
        age = a;
        System.out.println("Name: " + name + ", Age: " + age);
    }

    public static void main(String[] args) {
        new Student();
        new Student("Arun");
        new Student("Arun", 22);
    }
}
          Quick Difference (Constructor vs Method)
           Feature	          Constructor	                             Method
             Name	                   Same as class	                            Any name
          Return Type	          No return type	                     Has return type (or void)
           When Called	  Runs automatically when object made	    Called manually using object.method()
          Purpose	                   Initialize object	                 Perform some action

9. Inner Class :

          Inner class simply means:
          A class inside another class.

         Think like this:
               Student is the main class.
               IDCard or Address is only useful for that student. So we keep that class inside the Student class.
               It’s like a "helper" class that belongs to the outer class only.

          Why Inner Class?
                Keeps your code clean and grouped.
                Inner class can access outer class variables directly (even private).
                Used when one class is only related to one specific outer class.

     1. Non-static Inner Class (Normal inner class)
        It’s like:

                "The Student has an IDCard. IDCard works only if a student exists."

class Student {
    String name = "Arun";

    class IDCard {
        void showID() {
            System.out.println("ID Card for: " + name);
        }
    }

    public static void main(String[] args) {
        Student s = new Student();
        Student.IDCard card = s.new IDCard();
        card.showID();
    }
}

Explain:
         IDCard is inside Student.
         You need to create the Student object first (s.new IDCard()).
         It can use name directly (no need to pass it).

    2. Static Inner Class
        It’s like:

        "Course info is fixed for all students. So no need to create a student to see it."

class Student {
    static class Course {
        void show() {
            System.out.println("Java Programming Course");
        }
    }

    public static void main(String[] args) {
        Student.Course c = new Student.Course();  // No need for Student object
        c.show();
    }
}
      Explain:
         Course class is marked as static.
         So it works without creating Student object.
         Good for common or utility stuff.

   3. Local Inner Class (Inside Method)
       It’s like:
          "You use it inside a method only — not needed outside."

class Student {
    void showMarks() {
        class Marks {
            void display() {
                System.out.println("Marks: 85");
            }
        }

        Marks m = new Marks();
        m.display();
    }

    public static void main(String[] args) {
        new Student().showMarks();
    }
}
    Explain:
         Marks class is created inside a method.
         You can use it only inside that method.
          It's hidden from rest of the class.

4. Anonymous Inner Class
          It’s like:
          "No class name. Just use it once, on the spot — mostly for overriding."

abstract class Student {
    abstract void study();
}

class Main {
    public static void main(String[] args) {
        Student s = new Student() {
            void study() {
                System.out.println("Studying Java");
            }
        };

        s.study();
    }
}
      Explain:
          No class name — just override method quickly.
         Mostly used when you want to change small behavior once.
         Very common in Android, UI buttons, etc.

10. Enum :

           enum = short for enumeration
           It’s a special type in Java used to store a group of fixed values (constants).
           Like a list of options that never change.

        Chill Explanation:
              Think of enums like this:
               You're filling a form and it asks:
               What is your year of study? — First, Second, Third, Final
               These are fixed values. You can’t just type anything.
               So you use enum to store these options.
  
   Why use Enum?
            To avoid typos and random values (e.g., no one types "firsst")
             Cleaner and more meaningful than just using strings or numbers
            Easy to switch through values using switch or if

 Example: Using Enum with Student

enum Year {
    FIRST, SECOND, THIRD, FINAL
}

class Student {
    String name;
    Year year;

    Student(String name, Year year) {
        this.name = name;
        this.year = year;
    }

    void showDetails() {
        System.out.println(name + " is in " + year + " year.");
    }

    public static void main(String[] args) {
        Student s1 = new Student("Arun", Year.SECOND);
        Student s2 = new Student("Meena", Year.FINAL);

        s1.showDetails();
        s2.showDetails();
    }
}

Code Explain :
         enum Year holds only allowed values: FIRST, SECOND, THIRD, FINAL
         Inside Student, we store which year the student belongs to using the enum
         When printing, we get something like:
        Arun is in SECOND year.

Bonus: Enum with switch
         You can also use enum in a switch statement to do different actions:

switch (s1.year) {
    case FIRST: System.out.println("Just started college!"); break;
    case FINAL: System.out.println("Final year pressure!"); break;
}

11. Array List :

           ArrayList is like a flexible array — size can grow/shrink anytime.
           In normal array, size is fixed:

           int[] arr = new int[5]; // only 5 values allowed
           But in ArrayList, size is dynamic:

          ArrayList<String> list = new ArrayList<>();
          list.add("Ram");
           list.add("Sam");
     Key Points:
           Can store multiple items (like names, marks, etc.)
           Can add, remove, or access items easily
           Only stores one type at a time (String, Integer, Student, etc.)

     Example: Student Names List

          import java.util.ArrayList;
class StudentList {
    public static void main(String[] args) {
        ArrayList<String> students = new ArrayList<>();

        students.add("Arun");
        students.add("Meena");
        students.add("Karthik");

        System.out.println("All students: " + students);
        System.out.println("First student: " + students.get(0));
        students.remove(1);
        System.out.println("After removal: " + students);
    }
}

         ArrayList = advanced array that grows or shrinks
         You can add students anytime, no need to fix size
          get() to fetch, remove() to delete, add() to insert

12. HashMap :
          HashMap = store data in key-value pairs.

    example:
          Key = roll number
          Value = student name


          101 -> Arun  
          102 -> Meena
     Key Points:
           Stores using Key : Value
           Like a mini-database (quick lookup)
           Keys must be unique

      Example: Student Roll Numbers

      import java.util.HashMap;

class StudentMap {
    public static void main(String[] args) {
        HashMap<Integer, String> studentMap = new HashMap<>();

        studentMap.put(101, "Arun");
        studentMap.put(102, "Meena");
        studentMap.put(103, "Karthik");

        System.out.println("All students: " + studentMap);
        System.out.println("Student with roll 102: " + studentMap.get(102));

        studentMap.remove(101);
        System.out.println("After removal: " + studentMap);
    }
}

         HashMap = like a contact book (number = key, name = value)
         You can add, get, or remove students by roll number
         put() = add, get() = fetch, remove() = delete

13. Streams :

          First... Why do we even need Streams?
                    You have a list of students.
          Now you want to:
                     Get students who are older than 20
                     Only pick their names
                     Sort them by name
                     Maybe print all names
              Normally, you’ll do this using for-loops, if, etc. right?

      But Stream says:
             no need to write big code. Just chain it like a flow and I’ll handle it."

      So... What’s a Stream?
             A Stream is just a way to do operations on a list in a smooth chain.

      It’s like this:


      students
              .stream()       // Start the flow
              .filter(...)    // Keep only what you want
              .map(...)       // Change data if needed
              .sorted(...)    // Sort it
               .collect(...)   // Collect back as list

       Think of it like making tea:
             Milk ➝ add tea powder ➝ filter ➝ pour into cup

        Real Student Example (Simple Code)

import java.util.*;
import java.util.stream.*;

class Student {
    String name;
    int age;

    Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

class StreamDemo {
    public static void main(String[] args) {
        List<Student> students = Arrays.asList(
            new Student("Ram", 21),
            new Student("Sam", 18),
            new Student("Meena", 23),
            new Student("Karthik", 19)
        );

        // 1. Get students older than 20
        List<Student> filtered = students.stream()
            .filter(s -> s.age > 20)
            .collect(Collectors.toList());

        System.out.println("Students age > 20:");
        for (Student s : filtered) {
            System.out.println(s.name + " (" + s.age + ")");
        }

        // 2. Get just their names
        List<String> names = students.stream()
            .map(s -> s.name)
            .collect(Collectors.toList());

        System.out.println("All student names:");
        System.out.println(names);

        // 3. Sort by name
        List<Student> sorted = students.stream()
            .sorted((a, b) -> a.name.compareTo(b.name))
            .collect(Collectors.toList());

        System.out.println("Sorted by name:");
        for (Student s : sorted) {
            System.out.println(s.name);
        }
    }
}
         Super Simple Breakdown
                Stream Part	What it does
                .stream()	         Starts the stream (data flow)
                 .filter()	         Only keep what you want (like age > 20)
                  .map()	         Change it (like get only name)
                  .sorted()	Sort the list
                  .collect()	Convert it back to List or Set
     Def  :

           Practiced Java Streams — used to process list data easily like filtering, mapping, and sorting. Used Student list to filter by age, get            names, and sort by name without using loops. Very useful for cleaner and shorter code.

14. Optional :

           Optional is like saying:
            this value might be there, or might be null. So handle it safely."
            It’s a container (box) that may have:
            A value 
            Or nothing (empty) 

       Why do we need Optional?
            In normal Java, if you try to use something that’s null, it gives you:

         NullPointerException 💀
         But with Optional, Java says:

             I’ll give you tools to check if it’s null or not, and safely do something with it.”

       Example using Student class
             Let’s say you try to get a student’s name, but sometimes it’s not set (i.e., null).
            Let’s wrap it using Optional and play it safe 

✅ Example Code:

import java.util.Optional;

class Student {
    private Optional<String> name;

    Student(String name) {
        this.name = Optional.ofNullable(name); // wrap the value
    }

    void printName() {
        if (name.isPresent()) {
            System.out.println("Student name: " + name.get());
        } else {
            System.out.println("Name is not available.");
        }
    }
}

class OptionalExample {
    public static void main(String[] args) {
        Student s1 = new Student("Kishore");
        Student s2 = new Student(null); // name is not set

        s1.printName(); // Output: Student name: Kishore
        s2.printName(); // Output: Name is not available.
    }
}
         Code Explanation:
               Optional<String> means the value might be there or not
               Optional.ofNullable(name) safely wraps it (even if null)
               .isPresent() checks if the value exists
                .get() gives the actual value (only if present)

          Never do this:

        String name = null;
       System.out.println(name.length()); // it Will crash if name is null
       But with Optional:


         Optional<String> name = Optional.ofNullable(null);
         System.out.println(name.orElse("No name")); // ✅ Safe output

         Explaination ;
             Optional is like saying:
            "This data might be missing, so handle it properly instead of letting the app crash."

         Def :
             Optional — helps avoid null pointer exceptions by wrapping data safely. Used Optional with Student name to check if it's present and               printed a default message if not. It makes code safer and cleaner.


15. try with resources :

              You’re opening a water bottle (file), drinking water (reading file), and then you forget to close the cap (file).
              Later, it leaks and creates a mess 💦

         Same in Java:
               If you open a file but forget to close it, it causes memory leaks or file errors.

        So What Is try-with-resources?
               It's a shortcut that tells Java:
               I’m using this file here. After I’m done, you close it for me, even if there’s an error."

       Example :
             You have a file students.txt with names:

             Ram
             Meena
             Kishore
             We want to read that file.

import java.io.*;

class StudentFileReader {
    public static void main(String[] args) {
        // 🔓 try-with-resources: Java will open + auto-close the file
        try (BufferedReader reader = new BufferedReader(new FileReader("students.txt"))) {
            String name;
            while ((name = reader.readLine()) != null) {
                System.out.println("Student: " + name);
            }
        } catch (IOException e) {
            System.out.println("Something went wrong: " + e.getMessage());
        }
    }
}

      Line by line
            Line	                      What it does
            try (...)	             We open the file inside this — Java will handle closing it
            BufferedReader	             Reads the file one line at a time
             readLine()	             Reads each student name
            System.out.println(...)	    Prints the student name
            catch	                      If something goes wrong (like file missing), this handles it

              Without try-with-resources, you would write extra code to close the file manually.
             But here — Java automatically closes it after the work is done. Clean and simple.

      definition:
              "try-with-resources is like telling Java to open something (like a file) and saying:
              ‘Once I finish my work, you close it for me, bro.’
               We use it to avoid memory leaks or forgetting to close files manually.”

