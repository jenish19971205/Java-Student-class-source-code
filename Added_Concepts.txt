1. Data types
         Data types are used to define what type of value a variable can hold (like number, text, decimal, etc.)
         Two Main Types of Data Types:
     1. Primitive Data Types (basic built-in types — small & fast)
          There are 8 primitive types:

            Type	    Example Value	           What It Stores
             int	        25	                  whole numbers
            float	       65.5f	                decimal numbers (less precision)
            double	     89.77	                decimal numbers (more precision)
             char	        'A'	                  single character
            boolean	   true / false	            true or false values
             byte	          120	                 small range numbers
             short	      25000	                 short-range numbers
            long	      9999999999L	              big numbers



    2. Non-Primitive Data Types (also called Reference types)
                 Type	      Example	      What It Is
               String	       "Ram"	      sequence of characters
                Array	      {1,2,3}	      collection of values
                Class	      Student s1	   user-defined blueprint
                Object	   new Student()	 actual thing from class

     Example Using Student Class with Different Data Types:

         class Student {
              // Primitive types
               int age = 20;
                float marks = 85.5f;
               char grade = 'A';
               boolean isPassed = true;

             // Non-primitive types
             String name = "Ram";

    void showDetails() {
        System.out.println("Name: " + name);        // String
        System.out.println("Age: " + age);          // int
        System.out.println("Marks: " + marks);      // float
        System.out.println("Grade: " + grade);      // char
        System.out.println("Passed: " + isPassed);  // boolean
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showDetails();
    }
}
        
      Explanation for the Code
            int age = 20; → holds a whole number (student’s age)
            float marks = 85.5f; → holds decimal number (student’s marks) — f is needed
            char grade = 'A'; → holds a single character
             boolean isPassed = true; → true or false value
            String name = "Ram"; → holds a sequence of characters (student name)
           The method showDetails() prints all the values stored using different data types.

        Def: 

           Learned Java Data Types — primitive (int, float, char, boolean, etc.) and non-primitive (String, Array, Class). Practiced using Student                class to define and print different types of data. Covered all types with real examples and beginner-friendly explanations.

2. Type Casting :

            Type casting just means changing one type of value to another.
            Like changing a number without decimal (int) to number with decimal (float) or the other way.
            Example: You have 10 rupees in int, but you want it like 10.00 in float. That’s casting.

        Two Types You Must Know:
              1. Widening Casting → Java does it automatically
                 Small ➡ Big type

                  int age = 18;
                  float newAge = age;  // no problem
                  Like giving 18 to a bigger box (float) → it becomes 18.0
                  No loss, no danger, Java handles it for you.

              2. Narrowing Casting → You must do it manually
                 Big ➡ Small type


                 double marks = 99.75;
                 int newMarks = (int) marks;
                 You’re putting 99.75 into a smaller box (int) → it cuts the .75
                  You MUST tell Java: “Hey, do this” by using (int)
                  Possible loss of data — so be careful.

          Student Example Code 

class Student {
    void showCasting() {
        // Widening
        int age = 20;
        float convertedAge = age;
        System.out.println("Widening: " + convertedAge);  // 20.0

        // Narrowing
        double marks = 85.6;
        int convertedMarks = (int) marks;
        System.out.println("Narrowing: " + convertedMarks);  // 85
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showCasting();
    }
}
      
      Explanation of Code:
          int age = 20; → normal age value
          float convertedAge = age; → becomes 20.0 → no issue (auto)
          double marks = 85.6; → marks with decimal
          int convertedMarks = (int) marks; → becomes 85 (cuts .6)
          System.out.println() shows both outputs

        Def: 

       Learned Type Casting — changing value types. Covered auto casting (int ➡ float) and manual casting (double ➡ int) with Student example.

3. Operators and presendance :

        In simple words, operators are symbols that do some work in Java — like add, subtract, compare, assign, etc.
       Operators are symbols used to do operations like math, checking conditions, assigning values, etc.

              Types of Operators in Java (With Easy Meaning)

                       Type	          What It Does	                      Example
                  Arithmetic	    Do math (+, -, *, /, %)	             a + b
             Relational / Comparison    Compare two values (==, >, <, etc.)	    a > b
                    Logical	       Combine conditions (&&,	
                  Assignment              Assign value (=, +=, -=, etc.)	    a = 10
                      Unary	   Work on one value (++a, --b, -a)	             a++
                      Bitwise	   Work on bits (&,	                               , ^, <<, >>)
                     Ternary	   Shortcut if-else condition ? val1 : val2	    a > b ? x : y

👨‍🎓 Example Using Student Class (Basic Operators):

class Student {
    void operatorDemo() {
        int marks1 = 85;
        int marks2 = 90;

        // Arithmetic
        int total = marks1 + marks2;
        System.out.println("Total: " + total);

        // Relational
        System.out.println("Is marks1 greater? " + (marks1 > marks2));

        // Logical
        boolean passed = (marks1 > 40) && (marks2 > 40);
        System.out.println("Passed both subjects: " + passed);

        // Assignment
        int bonus = 5;
        bonus += 10; // same as bonus = bonus + 10
        System.out.println("Bonus: " + bonus);

        // Unary
        int age = 20;
        age++;
        System.out.println("Age after 1 year: " + age);

        // Ternary
        String result = (marks1 > 50) ? "Pass" : "Fail";
        System.out.println("Result: " + result);
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.operatorDemo();
    }
}
     Explanation of Code:
             +, >, &&, =, ++, ? : are all different operators
             Used them to calculate marks, check if passed, add bonus, and more
             Ternary operator is a short version of if-else

       What Is Operator Precedence?
             Operator precedence means which operator runs first when multiple are in the same line.

        Example:

             int result = 10 + 5 * 2;
             Here * runs first, not +
              So 5 * 2 = 10, then 10 + 10 = 20

          Java follows a priority order to run operators — multiply/divide has higher priority 
          when running multiple operators in one line.

4. Strings in detail :

        String = group of characters (text)
       In Java, it’s a class, not a data type — but we use it like a normal variable.
       If we want to store and work with text (like name, address, etc.), we use String in Java.

       String name = "Ram";

   Ways to Create String
      1. Using Double Quotes (common way)
           String name = "Ram";
           Java directly stores it in memory (String Constant Pool).
      2. Using new Keyword (rarely used)

           String name = new String("Ram");
           Stored in heap memory, creates new object every time.

   Common String Methods

           Method	                  Use	                         Example
          length()	Finds how long the string is	       "Ram".length() → 3
        charAt(index)	Get char at specific index 	      "Ram".charAt(1) → 'a'
        toUpperCase()	Convert to caps	                        "ram".toUpperCase() → "RAM"
        toLowerCase()	Convert to small letters	               "RAM".toLowerCase() → "ram"
        equals()	         Compare 2 strings (case-sensitive)	       "Ram".equals("ram") → false
      equalsIgnoreCase()	Compare strings without case check	       "Ram".equalsIgnoreCase("ram") → true
       contains()	         Check if part exists	                "Student".contains("dent") → true
      substring(start, end)    Get part of string	                "Student".substring(0, 3) → "Stu"
        concat()	           Join 2 strings	                          "Ram".concat(" Kumar") → "Ram Kumar"
        replace()	               Replace text	                 "Ram".replace("a", "o") → "Rom"

Example Using Student Class

class Student {
    void stringOperations() {
        String name = "Arun";
        String course = "Java";

        // Length
        System.out.println("Name length: " + name.length());

        // Uppercase
        System.out.println("Uppercase: " + name.toUpperCase());

        // Char at position
        System.out.println("2nd letter: " + name.charAt(1));

        // String join
        String fullInfo = name + " is learning " + course;
        System.out.println("Info: " + fullInfo);

        // Equals check
        System.out.println("Name equals Arun? " + name.equals("Arun"));

        // Contains
        System.out.println("Name contains 'ru'? " + name.contains("ru"));
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.stringOperations();
    }
}

     Easy Explanation
        name.length() → how many letters in the name
        toUpperCase() → make it full caps
        charAt(1) → gives second letter (index starts from 0)
        + → you can join strings easily using + or concat()
        equals() → compare strings safely
        contains() → check if something is inside the string

5. Method Overloading :

      Same method name, but different parameters (inputs) in the same class.
      Basically, you're doing similar work, but in multiple styles, depending on the input.

  Simple Definition:
      Method Overloading is when you create multiple methods with same name but different arguments in the same class.
      Different number of parameters
      Or different data types

  Example: Method Overloading in Student

class Student {
    void showInfo(String name) {
        System.out.println("Student Name: " + name);
    }

    void showInfo(String name, int age) {
        System.out.println("Name: " + name + ", Age: " + age);
    }

    void showInfo(int rollNo) {
        System.out.println("Roll Number: " + rollNo);
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.showInfo("Arun");
        s.showInfo("Arun", 20);
        s.showInfo(101);
    }
}
 Easy Explanation:
       showInfo() is called multiple times
       But each time with different inputs (name, name+age, rollNo)
      Java automatically picks the right method based on input
      This is overloading — same method name, different inputs

6. Method Overriding?
      Same method name, same parameters, but in different classes (Parent → Child)
      You're changing the behavior of a method in the child class.

   Simple Definition:
       Method Overriding is when a child class gives its own version of a method that already exists in the parent class — with the same name and            parameters.

  Example: Method Overriding in Student

class Student {
    void study() {
        System.out.println("Student is studying.");
    }
}

class CollegeStudent extends Student {
    @Override
    void study() {
        System.out.println("College student is studying with laptop.");
    }

    public static void main(String[] args) {
        CollegeStudent cs = new CollegeStudent();
        cs.study();  // Calls overridden method
    }
}

     Easy Explanation:
          Parent class has study() method
          Child class (CollegeStudent) overrides that method
           Even though method name and input is same, child class gives its own version
           Java will run the child class version when object is of child

       Overloading vs Overriding (Simple Table)

           Feature	     Overloading	                            Overriding
     Classes involved	      Same class	                           Parent and Child class
       Method Signature	      Same name, different params	          Same name, same params
          Purpose	           Do similar things in different ways	 Change behavior in child class
       Example Use	      Print name, Print name+age	           Parent student vs College student

7. Scope :

       Scope means:
             Where a variable can be seen or used in the program.
              Or simply — how long and where a variable lives inside your code.

       Types of Scope in Java :

        Scope Type	      What it means
        Local Scope	      Inside a method/block only
        Instance Scope	      Inside class (non-static) — needs object
        Static/Global Scope      Inside class (static) — no object needed
        Block Scope	      Inside curly brackets {} like if/for

       Example: Using Student Class to Show Scope

class Student {
    String name = "Arun";         // Instance Scope
    static String school = "ABC"; // Static Scope

    void printDetails() {
        int age = 20; // Local Scope (inside method)
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }

    void checkBlockScope() {
        if (true) {
            String course = "Java"; // Block Scope
            System.out.println("Course: " + course);
        }
        // course variable can't be used here — outside its block
    }

    public static void main(String[] args) {
        Student s = new Student();
        s.printDetails();
        s.checkBlockScope();

        // Static can be accessed directly
        System.out.println("School: " + school);
    }
}

Easy Explanation:
       name → can be used in any non-static method (belongs to object)
       school → can be used anywhere in class (static = belongs to class)
       age → only inside the printDetails() method
      course → only inside the if block where it was created

 Analogy:
        Local = Just temporary, like something in your pocket
        Instance = Belongs to object, like your ID card
        Static = Shared by all, like school name
        Block = Limited, like a locker only in one room

